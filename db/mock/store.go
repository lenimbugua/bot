// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lenimbugua/bot/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/lenimbugua/bot/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateBot mocks base method.
func (m *MockStore) CreateBot(arg0 context.Context, arg1 db.CreateBotParams) (db.Bot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBot", arg0, arg1)
	ret0, _ := ret[0].(db.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBot indicates an expected call of CreateBot.
func (mr *MockStoreMockRecorder) CreateBot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBot", reflect.TypeOf((*MockStore)(nil).CreateBot), arg0, arg1)
}

// CreateChannel mocks base method.
func (m *MockStore) CreateChannel(arg0 context.Context, arg1 string) (db.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0, arg1)
	ret0, _ := ret[0].(db.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockStoreMockRecorder) CreateChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockStore)(nil).CreateChannel), arg0, arg1)
}

// CreateCompany mocks base method.
func (m *MockStore) CreateCompany(arg0 context.Context, arg1 db.CreateCompanyParams) (db.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", arg0, arg1)
	ret0, _ := ret[0].(db.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockStoreMockRecorder) CreateCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockStore)(nil).CreateCompany), arg0, arg1)
}

// CreateQuestion mocks base method.
func (m *MockStore) CreateQuestion(arg0 context.Context, arg1 db.CreateQuestionParams) (db.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestion", arg0, arg1)
	ret0, _ := ret[0].(db.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuestion indicates an expected call of CreateQuestion.
func (mr *MockStoreMockRecorder) CreateQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestion", reflect.TypeOf((*MockStore)(nil).CreateQuestion), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteBot mocks base method.
func (m *MockStore) DeleteBot(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBot indicates an expected call of DeleteBot.
func (mr *MockStoreMockRecorder) DeleteBot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBot", reflect.TypeOf((*MockStore)(nil).DeleteBot), arg0, arg1)
}

// DeleteCompany mocks base method.
func (m *MockStore) DeleteCompany(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompany", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockStoreMockRecorder) DeleteCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockStore)(nil).DeleteCompany), arg0, arg1)
}

// GetBot mocks base method.
func (m *MockStore) GetBot(arg0 context.Context, arg1 int64) (db.Bot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBot", arg0, arg1)
	ret0, _ := ret[0].(db.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBot indicates an expected call of GetBot.
func (mr *MockStoreMockRecorder) GetBot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBot", reflect.TypeOf((*MockStore)(nil).GetBot), arg0, arg1)
}

// GetChannel mocks base method.
func (m *MockStore) GetChannel(arg0 context.Context, arg1 string) (db.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", arg0, arg1)
	ret0, _ := ret[0].(db.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockStoreMockRecorder) GetChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockStore)(nil).GetChannel), arg0, arg1)
}

// GetCompanyByEmail mocks base method.
func (m *MockStore) GetCompanyByEmail(arg0 context.Context, arg1 string) (db.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByEmail indicates an expected call of GetCompanyByEmail.
func (mr *MockStoreMockRecorder) GetCompanyByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByEmail", reflect.TypeOf((*MockStore)(nil).GetCompanyByEmail), arg0, arg1)
}

// GetCompanyByID mocks base method.
func (m *MockStore) GetCompanyByID(arg0 context.Context, arg1 int64) (db.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByID", arg0, arg1)
	ret0, _ := ret[0].(db.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByID indicates an expected call of GetCompanyByID.
func (mr *MockStoreMockRecorder) GetCompanyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByID", reflect.TypeOf((*MockStore)(nil).GetCompanyByID), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListAllBots mocks base method.
func (m *MockStore) ListAllBots(arg0 context.Context, arg1 db.ListAllBotsParams) ([]db.Bot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllBots", arg0, arg1)
	ret0, _ := ret[0].([]db.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllBots indicates an expected call of ListAllBots.
func (mr *MockStoreMockRecorder) ListAllBots(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllBots", reflect.TypeOf((*MockStore)(nil).ListAllBots), arg0, arg1)
}

// ListCompanies mocks base method.
func (m *MockStore) ListCompanies(arg0 context.Context, arg1 db.ListCompaniesParams) ([]db.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompanies", arg0, arg1)
	ret0, _ := ret[0].([]db.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompanies indicates an expected call of ListCompanies.
func (mr *MockStoreMockRecorder) ListCompanies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompanies", reflect.TypeOf((*MockStore)(nil).ListCompanies), arg0, arg1)
}

// ListCompanyBots mocks base method.
func (m *MockStore) ListCompanyBots(arg0 context.Context, arg1 db.ListCompanyBotsParams) ([]db.Bot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompanyBots", arg0, arg1)
	ret0, _ := ret[0].([]db.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompanyBots indicates an expected call of ListCompanyBots.
func (mr *MockStoreMockRecorder) ListCompanyBots(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompanyBots", reflect.TypeOf((*MockStore)(nil).ListCompanyBots), arg0, arg1)
}

// UpdateBot mocks base method.
func (m *MockStore) UpdateBot(arg0 context.Context, arg1 db.UpdateBotParams) (db.Bot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBot", arg0, arg1)
	ret0, _ := ret[0].(db.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBot indicates an expected call of UpdateBot.
func (mr *MockStoreMockRecorder) UpdateBot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBot", reflect.TypeOf((*MockStore)(nil).UpdateBot), arg0, arg1)
}

// UpdateCompany mocks base method.
func (m *MockStore) UpdateCompany(arg0 context.Context, arg1 db.UpdateCompanyParams) (db.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", arg0, arg1)
	ret0, _ := ret[0].(db.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockStoreMockRecorder) UpdateCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockStore)(nil).UpdateCompany), arg0, arg1)
}
